$date
Tue Apr 29 18:27:31 2025
$end
$version
Riviera-PRO Version 2023.04.112.8911
$end
$timescale
1 ns
$end

$scope module mux4_1_8bit $end
$var wire 8 ! d0 [7:0] $end
$var wire 8 ! d1 [7:0] $end
$var wire 8 ! d2 [7:0] $end
$var wire 8 ! d3 [7:0] $end
$var wire 2 " sel [1:0] $end
$var wire 8 # y [7:0] $end
$upscope $end


$scope module testbench $end
$var wire 8 $ o [7:0] $end
$var wire 1 % ready $end
$var wire 8 & in_a [7:0] $end
$var wire 8 ' in_b [7:0] $end
$var reg 16 ( in [15:0] $end
$var reg 2 ) op_codes [1:0] $end
$var reg 1 * valid $end
$var reg 1 + clk $end
$var reg 1 , rst $end

$scope module uut $end
$var wire 1 - in [15] $end
$var wire 1 . in [14] $end
$var wire 1 / in [13] $end
$var wire 1 0 in [12] $end
$var wire 1 1 in [11] $end
$var wire 1 2 in [10] $end
$var wire 1 3 in [9] $end
$var wire 1 4 in [8] $end
$var wire 1 5 in [7] $end
$var wire 1 6 in [6] $end
$var wire 1 7 in [5] $end
$var wire 1 8 in [4] $end
$var wire 1 9 in [3] $end
$var wire 1 : in [2] $end
$var wire 1 ; in [1] $end
$var wire 1 < in [0] $end
$var wire 2 = op_codes [1:0] $end
$var wire 1 > valid $end
$var wire 1 ? clk $end
$var wire 1 @ rst $end
$var wire 1 % ready $end
$var wire 8 A in_a [7:0] $end
$var wire 8 B in_b [7:0] $end
$var wire 1 C c [10] $end
$var wire 1 D c [9] $end
$var wire 1 E c [8] $end
$var wire 1 F c [7] $end
$var wire 1 G c [6] $end
$var wire 1 H c [5] $end
$var wire 1 I c [4] $end
$var wire 1 J c [3] $end
$var wire 1 K c [2] $end
$var wire 1 L c [1] $end
$var wire 1 M c [0] $end
$var wire 1 N q [7] $end
$var wire 1 O q [6] $end
$var wire 1 P q [5] $end
$var wire 1 Q q [4] $end
$var wire 1 R q [3] $end
$var wire 1 S q [2] $end
$var wire 1 T q [1] $end
$var wire 1 U q [0] $end
$var wire 8 V m [7:0] $end
$var wire 1 W a [7] $end
$var wire 1 X a [6] $end
$var wire 1 Y a [5] $end
$var wire 1 Z a [4] $end
$var wire 1 [ a [3] $end
$var wire 1 \ a [2] $end
$var wire 1 ] a [1] $end
$var wire 1 ^ a [0] $end
$var wire 8 _ outAdder [7:0] $end
$var wire 1 ` complementedM [7] $end
$var wire 1 a complementedM [6] $end
$var wire 1 b complementedM [5] $end
$var wire 1 c complementedM [4] $end
$var wire 1 d complementedM [3] $end
$var wire 1 e complementedM [2] $end
$var wire 1 f complementedM [1] $end
$var wire 1 g complementedM [0] $end
$var wire 1 h muxAdderIn [7] $end
$var wire 1 i muxAdderIn [6] $end
$var wire 1 j muxAdderIn [5] $end
$var wire 1 k muxAdderIn [4] $end
$var wire 1 l muxAdderIn [3] $end
$var wire 1 m muxAdderIn [2] $end
$var wire 1 n muxAdderIn [1] $end
$var wire 1 o muxAdderIn [0] $end
$var wire 8 p muxQInput [7:0] $end
$var wire 8 q muxAInput [7:0] $end
$var wire 8 r inputQ [7:0] $end
$var wire 1 s muxQ_1 $end
$var wire 1 t muxASerialIn $end
$var wire 1 u muxQSerialIn $end
$var wire 1 v q_1_out $end
$var wire 3 w count [2:0] $end
$var wire 1 x aSerialOut $end
$var wire 1 y qSerialOut $end
$var reg 8 z o [7:0] $end

$scope module Q_minus_one_ff $end
$var wire 1 ? clk $end
$var wire 1 s d $end
$var wire 1 { en $end
$var wire 1 @ rst $end
$var wire 1 v o $end
$var reg 1 | data $end
$upscope $end


$scope module reg_A $end
$var wire 8 _ parallelIn [7:0] $end
$var wire 1 U serialIn $end
$var wire 1 F lshift $end
$var wire 1 G rshift $end
$var wire 1 J load $end
$var wire 1 } rst $end
$var wire 1 ~ en $end
$var wire 1 ? clk $end
$var wire 1 !! outFlipFlop [7] $end
$var wire 1 "! outFlipFlop [6] $end
$var wire 1 #! outFlipFlop [5] $end
$var wire 1 $! outFlipFlop [4] $end
$var wire 1 %! outFlipFlop [3] $end
$var wire 1 &! outFlipFlop [2] $end
$var wire 1 '! outFlipFlop [1] $end
$var wire 1 (! outFlipFlop [0] $end
$var reg 1 )! serialOut $end
$var reg 8 *! parallelOut [7:0] $end

$scope begin FlipFlop[0] $end
$var wire 1 +! d $end
$var parameter 32 ,! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 +! d $end
$var wire 1 ~ en $end
$var wire 1 } rst $end
$var wire 1 (! o $end
$var reg 1 -! data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[1] $end
$var wire 1 .! d $end
$var parameter 32 /! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 .! d $end
$var wire 1 ~ en $end
$var wire 1 } rst $end
$var wire 1 '! o $end
$var reg 1 0! data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[2] $end
$var wire 1 1! d $end
$var parameter 32 2! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 1! d $end
$var wire 1 ~ en $end
$var wire 1 } rst $end
$var wire 1 &! o $end
$var reg 1 3! data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[3] $end
$var wire 1 4! d $end
$var parameter 32 5! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 4! d $end
$var wire 1 ~ en $end
$var wire 1 } rst $end
$var wire 1 %! o $end
$var reg 1 6! data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[4] $end
$var wire 1 7! d $end
$var parameter 32 8! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 7! d $end
$var wire 1 ~ en $end
$var wire 1 } rst $end
$var wire 1 $! o $end
$var reg 1 9! data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[5] $end
$var wire 1 :! d $end
$var parameter 32 ;! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 :! d $end
$var wire 1 ~ en $end
$var wire 1 } rst $end
$var wire 1 #! o $end
$var reg 1 <! data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[6] $end
$var wire 1 =! d $end
$var parameter 32 >! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 =! d $end
$var wire 1 ~ en $end
$var wire 1 } rst $end
$var wire 1 "! o $end
$var reg 1 ?! data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[7] $end
$var wire 1 @! d $end
$var parameter 32 A! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 @! d $end
$var wire 1 ~ en $end
$var wire 1 } rst $end
$var wire 1 !! o $end
$var reg 1 B! data $end
$upscope $end

$upscope $end

$upscope $end


$scope module muxsum $end
$var wire 8 A d0 [7:0] $end
$var wire 8 _ d1 [7:0] $end
$var wire 1 I sel $end
$var wire 8 r y [7:0] $end
$upscope $end


$scope module reg_Q $end
$var wire 8 r parallelIn [7:0] $end
$var wire 1 ^ serialIn $end
$var wire 1 C! lshift $end
$var wire 1 G rshift $end
$var wire 1 D! load $end
$var wire 1 @ rst $end
$var wire 1 E! en $end
$var wire 1 ? clk $end
$var wire 1 F! outFlipFlop [7] $end
$var wire 1 G! outFlipFlop [6] $end
$var wire 1 H! outFlipFlop [5] $end
$var wire 1 I! outFlipFlop [4] $end
$var wire 1 J! outFlipFlop [3] $end
$var wire 1 K! outFlipFlop [2] $end
$var wire 1 L! outFlipFlop [1] $end
$var wire 1 M! outFlipFlop [0] $end
$var reg 1 N! serialOut $end
$var reg 8 O! parallelOut [7:0] $end

$scope begin FlipFlop[0] $end
$var wire 1 P! d $end
$var parameter 32 Q! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 P! d $end
$var wire 1 E! en $end
$var wire 1 @ rst $end
$var wire 1 M! o $end
$var reg 1 R! data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[1] $end
$var wire 1 S! d $end
$var parameter 32 T! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 S! d $end
$var wire 1 E! en $end
$var wire 1 @ rst $end
$var wire 1 L! o $end
$var reg 1 U! data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[2] $end
$var wire 1 V! d $end
$var parameter 32 W! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 V! d $end
$var wire 1 E! en $end
$var wire 1 @ rst $end
$var wire 1 K! o $end
$var reg 1 X! data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[3] $end
$var wire 1 Y! d $end
$var parameter 32 Z! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 Y! d $end
$var wire 1 E! en $end
$var wire 1 @ rst $end
$var wire 1 J! o $end
$var reg 1 [! data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[4] $end
$var wire 1 \! d $end
$var parameter 32 ]! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 \! d $end
$var wire 1 E! en $end
$var wire 1 @ rst $end
$var wire 1 I! o $end
$var reg 1 ^! data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[5] $end
$var wire 1 _! d $end
$var parameter 32 `! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 _! d $end
$var wire 1 E! en $end
$var wire 1 @ rst $end
$var wire 1 H! o $end
$var reg 1 a! data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[6] $end
$var wire 1 b! d $end
$var parameter 32 c! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 b! d $end
$var wire 1 E! en $end
$var wire 1 @ rst $end
$var wire 1 G! o $end
$var reg 1 d! data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[7] $end
$var wire 1 e! d $end
$var parameter 32 f! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 e! d $end
$var wire 1 E! en $end
$var wire 1 @ rst $end
$var wire 1 F! o $end
$var reg 1 g! data $end
$upscope $end

$upscope $end

$upscope $end


$scope module reg_M $end
$var wire 8 B parallelIn [7:0] $end
$var wire 1 C! serialIn $end
$var wire 1 C! lshift $end
$var wire 1 C! rshift $end
$var wire 1 L load $end
$var wire 1 @ rst $end
$var wire 1 L en $end
$var wire 1 ? clk $end
$var wire 1 h! outFlipFlop [7] $end
$var wire 1 i! outFlipFlop [6] $end
$var wire 1 j! outFlipFlop [5] $end
$var wire 1 k! outFlipFlop [4] $end
$var wire 1 l! outFlipFlop [3] $end
$var wire 1 m! outFlipFlop [2] $end
$var wire 1 n! outFlipFlop [1] $end
$var wire 1 o! outFlipFlop [0] $end
$var reg 1 p! serialOut $end
$var reg 8 q! parallelOut [7:0] $end

$scope begin FlipFlop[0] $end
$var wire 1 r! d $end
$var parameter 32 s! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 r! d $end
$var wire 1 L en $end
$var wire 1 @ rst $end
$var wire 1 o! o $end
$var reg 1 t! data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[1] $end
$var wire 1 u! d $end
$var parameter 32 v! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 u! d $end
$var wire 1 L en $end
$var wire 1 @ rst $end
$var wire 1 n! o $end
$var reg 1 w! data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[2] $end
$var wire 1 x! d $end
$var parameter 32 y! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 x! d $end
$var wire 1 L en $end
$var wire 1 @ rst $end
$var wire 1 m! o $end
$var reg 1 z! data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[3] $end
$var wire 1 {! d $end
$var parameter 32 |! i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 {! d $end
$var wire 1 L en $end
$var wire 1 @ rst $end
$var wire 1 l! o $end
$var reg 1 }! data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[4] $end
$var wire 1 ~! d $end
$var parameter 32 !" i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 ~! d $end
$var wire 1 L en $end
$var wire 1 @ rst $end
$var wire 1 k! o $end
$var reg 1 "" data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[5] $end
$var wire 1 #" d $end
$var parameter 32 $" i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 #" d $end
$var wire 1 L en $end
$var wire 1 @ rst $end
$var wire 1 j! o $end
$var reg 1 %" data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[6] $end
$var wire 1 &" d $end
$var parameter 32 '" i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 &" d $end
$var wire 1 L en $end
$var wire 1 @ rst $end
$var wire 1 i! o $end
$var reg 1 (" data $end
$upscope $end

$upscope $end


$scope begin FlipFlop[7] $end
$var wire 1 )" d $end
$var parameter 32 *" i [31:0] $end

$scope module FFD $end
$var wire 1 ? clk $end
$var wire 1 )" d $end
$var wire 1 L en $end
$var wire 1 @ rst $end
$var wire 1 h! o $end
$var reg 1 +" data $end
$upscope $end

$upscope $end

$upscope $end


$scope module complementM $end
$var wire 8 V in [7:0] $end
$var wire 1 H en $end
$var reg 8 ," out [7:0] $end
$upscope $end


$scope module mux_adder_in $end
$var wire 1 W d0 [7] $end
$var wire 1 X d0 [6] $end
$var wire 1 Y d0 [5] $end
$var wire 1 Z d0 [4] $end
$var wire 1 [ d0 [3] $end
$var wire 1 \ d0 [2] $end
$var wire 1 ] d0 [1] $end
$var wire 1 ^ d0 [0] $end
$var wire 1 N d1 [7] $end
$var wire 1 O d1 [6] $end
$var wire 1 P d1 [5] $end
$var wire 1 Q d1 [4] $end
$var wire 1 R d1 [3] $end
$var wire 1 S d1 [2] $end
$var wire 1 T d1 [1] $end
$var wire 1 U d1 [0] $end
$var wire 1 I sel $end
$var wire 1 h y [7] $end
$var wire 1 i y [6] $end
$var wire 1 j y [5] $end
$var wire 1 k y [4] $end
$var wire 1 l y [3] $end
$var wire 1 m y [2] $end
$var wire 1 n y [1] $end
$var wire 1 o y [0] $end
$upscope $end


$scope module mux_q_input $end
$var wire 1 5 d0 [7] $end
$var wire 1 6 d0 [6] $end
$var wire 1 7 d0 [5] $end
$var wire 1 8 d0 [4] $end
$var wire 1 9 d0 [3] $end
$var wire 1 : d0 [2] $end
$var wire 1 ; d0 [1] $end
$var wire 1 < d0 [0] $end
$var wire 8 _ d1 [7:0] $end
$var wire 1 I sel $end
$var wire 8 p y [7:0] $end
$upscope $end


$scope module mux_a_input $end
$var wire 8 -" d0 [7:0] $end
$var wire 8 _ d1 [7:0] $end
$var wire 1 J sel $end
$var wire 8 q y [7:0] $end
$upscope $end


$scope module mux_q_minus_one $end
$var wire 1 C! d0 $end
$var wire 1 y d1 $end
$var wire 1 G sel $end
$var wire 1 s y $end
$upscope $end


$scope module mux_serial_a $end
$var wire 1 W d0 $end
$var wire 1 y d1 $end
$var wire 1 F sel $end
$var wire 1 t y $end
$upscope $end


$scope module mux_serial_q $end
$var wire 1 C! d0 $end
$var wire 1 x d1 $end
$var wire 1 G sel $end
$var wire 1 u y $end
$upscope $end


$scope module ALU_Adder $end
$var wire 1 h x [7] $end
$var wire 1 i x [6] $end
$var wire 1 j x [5] $end
$var wire 1 k x [4] $end
$var wire 1 l x [3] $end
$var wire 1 m x [2] $end
$var wire 1 n x [1] $end
$var wire 1 o x [0] $end
$var wire 1 ` y [7] $end
$var wire 1 a y [6] $end
$var wire 1 b y [5] $end
$var wire 1 c y [4] $end
$var wire 1 d y [3] $end
$var wire 1 e y [2] $end
$var wire 1 f y [1] $end
$var wire 1 g y [0] $end
$var wire 1 H ci $end
$var wire 1 ." en $end
$var wire 1 /" sum_wire [7] $end
$var wire 1 0" sum_wire [6] $end
$var wire 1 1" sum_wire [5] $end
$var wire 1 2" sum_wire [4] $end
$var wire 1 3" sum_wire [3] $end
$var wire 1 4" sum_wire [2] $end
$var wire 1 5" sum_wire [1] $end
$var wire 1 6" sum_wire [0] $end
$var wire 1 7" carry [7] $end
$var wire 1 8" carry [6] $end
$var wire 1 9" carry [5] $end
$var wire 1 :" carry [4] $end
$var wire 1 ;" carry [3] $end
$var wire 1 <" carry [2] $end
$var wire 1 =" carry [1] $end
$var wire 1 >" carry [0] $end
$var reg 8 ?" o [7:0] $end

$scope module FA0 $end
$var wire 1 o a $end
$var wire 1 g b $end
$var wire 1 H cin $end
$var wire 1 6" sum $end
$var wire 1 >" cout $end
$upscope $end


$scope module FA1 $end
$var wire 1 n a $end
$var wire 1 f b $end
$var wire 1 >" cin $end
$var wire 1 5" sum $end
$var wire 1 =" cout $end
$upscope $end


$scope module FA2 $end
$var wire 1 m a $end
$var wire 1 e b $end
$var wire 1 =" cin $end
$var wire 1 4" sum $end
$var wire 1 <" cout $end
$upscope $end


$scope module FA3 $end
$var wire 1 l a $end
$var wire 1 d b $end
$var wire 1 <" cin $end
$var wire 1 3" sum $end
$var wire 1 ;" cout $end
$upscope $end


$scope module FA4 $end
$var wire 1 k a $end
$var wire 1 c b $end
$var wire 1 ;" cin $end
$var wire 1 2" sum $end
$var wire 1 :" cout $end
$upscope $end


$scope module FA5 $end
$var wire 1 j a $end
$var wire 1 b b $end
$var wire 1 :" cin $end
$var wire 1 1" sum $end
$var wire 1 9" cout $end
$upscope $end


$scope module FA6 $end
$var wire 1 i a $end
$var wire 1 a b $end
$var wire 1 9" cin $end
$var wire 1 0" sum $end
$var wire 1 8" cout $end
$upscope $end


$scope module FA7 $end
$var wire 1 h a $end
$var wire 1 ` b $end
$var wire 1 8" cin $end
$var wire 1 /" sum $end
$var wire 1 7" cout $end
$upscope $end

$upscope $end


$scope module Count $end
$var wire 1 ? clk $end
$var wire 1 M rst $end
$var wire 1 E en $end
$var reg 3 @" o [2:0] $end
$upscope $end


$scope module Control $end
$var wire 1 ? clk $end
$var wire 1 @ reset $end
$var wire 1 > start $end
$var wire 2 = opcode [1:0] $end
$var wire 1 U Q0 $end
$var wire 1 v Q_1 $end
$var wire 1 W A7 $end
$var wire 1 A" count $end
$var wire 1 C control [10] $end
$var wire 1 D control [9] $end
$var wire 1 E control [8] $end
$var wire 1 F control [7] $end
$var wire 1 G control [6] $end
$var wire 1 H control [5] $end
$var wire 1 I control [4] $end
$var wire 1 J control [3] $end
$var wire 1 K control [2] $end
$var wire 1 L control [1] $end
$var wire 1 M control [0] $end
$var wire 1 % done $end
$var wire 4 B" state [3:0] $end
$var wire 1 C" theta0 $end
$var wire 1 D" theta1 $end
$var wire 1 E" theta2 $end
$var wire 1 F" theta3 $end
$var wire 1 G" q0 $end
$var wire 1 H" q1 $end
$var wire 1 I" q2 $end
$var wire 1 J" setter $end
$var wire 1 K" C0 $end
$var wire 1 L" C1 $end
$var wire 1 M" C2 $end
$var wire 1 N" C3 $end
$var wire 1 O" C4 $end
$var wire 1 P" C5 $end
$var wire 1 Q" C6 $end
$var wire 1 R" C7 $end
$var wire 1 S" C8 $end
$var wire 1 T" C9 $end
$var wire 1 U" C10 $end

$scope module sequence_counter $end
$var wire 1 ? clk $end
$var wire 1 @ reset $end
$var wire 1 > begin_op $end
$var reg 4 V" state [3:0] $end
$upscope $end


$scope module ff_q0 $end
$var wire 1 > S $end
$var wire 1 W" R $end
$var wire 1 ? clk $end
$var wire 1 @ rst $end
$var reg 1 X" Q $end
$upscope $end


$scope module mux_sr $end
$var wire 1 Y" d0 $end
$var wire 1 Y" d1 $end
$var wire 1 Z" d2 $end
$var wire 1 Y" d3 $end
$var wire 2 = sel [1:0] $end
$var wire 1 J" y $end
$upscope $end


$scope module ff_q1 $end
$var wire 1 W" S $end
$var wire 1 J" R $end
$var wire 1 ? clk $end
$var wire 1 @ rst $end
$var reg 1 [" Q $end
$upscope $end


$scope module ff_q2 $end
$var wire 1 J" S $end
$var wire 1 % R $end
$var wire 1 ? clk $end
$var wire 1 @ rst $end
$var reg 1 \" Q $end
$upscope $end


$scope module mux_C2 $end
$var wire 1 C! d0 $end
$var wire 1 C! d1 $end
$var wire 1 K" d2 $end
$var wire 1 C! d3 $end
$var wire 2 = sel [1:0] $end
$var wire 1 M" y $end
$upscope $end


$scope module mux_C3 $end
$var wire 1 C! d0 $end
$var wire 1 C! d1 $end
$var wire 1 ]" d2 $end
$var wire 1 ^" d3 $end
$var wire 2 = sel [1:0] $end
$var wire 1 N" y $end
$upscope $end


$scope module mux_C4 $end
$var wire 1 _" d0 $end
$var wire 1 _" d1 $end
$var wire 1 C! d2 $end
$var wire 1 C! d3 $end
$var wire 2 = sel [1:0] $end
$var wire 1 O" y $end
$upscope $end


$scope module mux_C5 $end
$var wire 1 C! d0 $end
$var wire 1 `" d1 $end
$var wire 1 a" d2 $end
$var wire 1 `" d3 $end
$var wire 2 = sel [1:0] $end
$var wire 1 P" y $end
$upscope $end


$scope module mux_C6 $end
$var wire 1 C! d0 $end
$var wire 1 C! d1 $end
$var wire 1 b" d2 $end
$var wire 1 C! d3 $end
$var wire 2 = sel [1:0] $end
$var wire 1 Q" y $end
$upscope $end


$scope module mux_C7 $end
$var wire 1 C! d0 $end
$var wire 1 C! d1 $end
$var wire 1 C! d2 $end
$var wire 1 c" d3 $end
$var wire 2 = sel [1:0] $end
$var wire 1 R" y $end
$upscope $end


$scope module mux_C8 $end
$var wire 1 C! d0 $end
$var wire 1 C! d1 $end
$var wire 1 d" d2 $end
$var wire 1 e" d3 $end
$var wire 2 = sel [1:0] $end
$var wire 1 S" y $end
$upscope $end


$scope module mux_C9 $end
$var wire 1 C! d0 $end
$var wire 1 C! d1 $end
$var wire 1 f" d2 $end
$var wire 1 f" d3 $end
$var wire 2 = sel [1:0] $end
$var wire 1 T" y $end
$upscope $end


$scope module mux_C10 $end
$var wire 1 f" d0 $end
$var wire 1 f" d1 $end
$var wire 1 g" d2 $end
$var wire 1 g" d3 $end
$var wire 2 = sel [1:0] $end
$var wire 1 U" y $end
$upscope $end

$upscope $end

$upscope $end


$scope begin 1unnblk $end
$var integer 32 h" i $end
$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
bz !
bz "
bx #
bx $
0%
b0 &
b0 '
b0 (
b0 )
0*
1+
1,
0-
0.
0/
00
01
02
03
04
05
06
07
08
09
0:
0;
0<
b0 =
0>
1?
1@
b0 A
b0 B
0C
0D
0E
0F
0G
0H
0I
0J
0K
0L
0M
0N
0O
0P
0Q
0R
0S
0T
0U
b0 V
0W
0X
0Y
0Z
0[
0\
0]
0^
bx _
0`
0a
0b
0c
0d
0e
0f
0g
0h
0i
0j
0k
0l
0m
0n
0o
b0 p
b0 q
b0 r
0s
0t
0u
0v
bx w
0x
0y
bx z
0{
0|
1}
0~
0!!
0"!
0#!
0$!
0%!
0&!
0'!
0(!
0)!
b0 *!
0+!
b0 ,!
0-!
0.!
b1 /!
00!
01!
b10 2!
03!
04!
b11 5!
06!
07!
b100 8!
09!
0:!
b101 ;!
0<!
0=!
b110 >!
0?!
0@!
b111 A!
0B!
0C!
0D!
0E!
0F!
0G!
0H!
0I!
0J!
0K!
0L!
0M!
0N!
b0 O!
0P!
b0 Q!
0R!
0S!
b1 T!
0U!
0V!
b10 W!
0X!
0Y!
b11 Z!
0[!
0\!
b100 ]!
0^!
0_!
b101 `!
0a!
0b!
b110 c!
0d!
0e!
b111 f!
0g!
0h!
0i!
0j!
0k!
0l!
0m!
0n!
0o!
0p!
b0 q!
0r!
b0 s!
0t!
0u!
b1 v!
0w!
0x!
b10 y!
0z!
0{!
b11 |!
0}!
0~!
b100 !"
0""
0#"
b101 $"
0%"
0&"
b110 '"
0("
0)"
b111 *"
0+"
b0 ,"
b0 -"
0."
0/"
00"
01"
02"
03"
04"
05"
06"
07"
08"
09"
0:"
0;"
0<"
0="
0>"
bx ?"
bx @"
xA"
b1 B"
1C"
0D"
0E"
0F"
0G"
0H"
0I"
0J"
0K"
0L"
0M"
0N"
0O"
0P"
0Q"
0R"
0S"
0T"
0U"
b1 V"
0W"
0X"
0Y"
0Z"
0Y"
0W"
0["
0\"
0]"
0^"
0_"
0_"
0`"
0a"
0`"
0b"
0c"
0d"
0e"
0C!
0f"
0f"
0g"
0g"
b0 h"
$end
#10
0,
b1 h"
0+
0?
0@
0}
#20
b10100000011 (
b10 )
1*
b10 h"
1+
b11 '
b101 &
1?
1>
b10 =
12
14
1;
1<
b11 p
b11 B
b101 A
1E!
1D!
b101 r
1P!
1V!
1R!
1X!
1X"
1K!
1M!
1G"
b101 O!
1S
1U
1K"
1M"
1M
1K
1}
1{
#30
0*
b11 h"
0+
0?
0>
0E!
0D!
#40
b100 h"
1+
1?
b0 @"
b10 V"
b10 B"
b0 w
0A"
1D"
0C"
0K"
1L"
0M"
1L
0M
1u!
1r!
0K
0}
0{
#50
b101 h"
0+
0?
#60
b110 h"
1+
1?
1t!
1w!
b100 V"
1n!
1o!
b100 B"
b11 q!
b11 V
1E"
0D"
b11 ,"
1f
1g
0L"
0L
15"
16"
#70
b111 h"
0+
0?
#80
b1000 h"
1+
1?
b1000 V"
b1000 B"
1F"
0E"
1W"
1W"
#90
b1001 h"
0+
0?
#100
b1010 h"
1+
1?
b1 V"
0X"
1["
1H"
0G"
b1 B"
0F"
1C"
0W"
0W"
1`"
1`"
1_"
1_"
1a"
1]"
1N"
1P"
1H
1J
b11111100 ,"
bx q
x@!
x=!
x:!
x7!
x4!
x1!
x.!
x+!
1."
1~
1>"
06"
1`
1a
1b
1c
1d
1e
0f
0g
0>"
1/"
10"
11"
12"
13"
14"
16"
05"
b11111101 ?"
b11111101 _
1+!
0.!
11!
14!
17!
1:!
1=!
1@!
b11111101 q
#110
b1011 h"
0+
0?
#120
b1100 h"
1+
1?
1-!
13!
16!
19!
1<!
1?!
1B!
b10 V"
1!!
1"!
1#!
1$!
1%!
1&!
1(!
b10 B"
b11111101 *!
1W
1X
1Y
1Z
1[
1\
1^
1D"
0C"
1h
1i
1j
1k
1l
1m
1o
0`"
0`"
0_"
0_"
0a"
0]"
1d"
1b"
1^"
1t
1Q"
1S"
0N"
0P"
17"
18"
19"
1:"
1;"
1<"
1>"
04"
06"
1E
1G
0H
0J
1)!
1N!
b11 ,"
15"
b0 q
1.!
0+!
0."
1e!
0V!
1S!
0P!
1E!
1{
0>"
16"
0`
0a
0b
0c
0d
0e
1f
1g
1y
1x
1u
1s
0<"
1>"
0/"
00"
01"
02"
14"
06"
0;"
1="
05"
0:"
1<"
12"
04"
09"
1;"
11"
03"
08"
1:"
10"
02"
07"
19"
1/"
01"
18"
00"
17"
0/"
#130
b1101 h"
0+
0?
#140
b1110 h"
1+
1?
1|
0-!
10!
0R!
1U!
0X!
1g!
b1 @"
b100 V"
1F!
0K!
1L!
0M!
0N!
1'!
0(!
0)!
1v
b100 B"
b1 w
b10000010 O!
b11111110 *!
1]
0^
1+!
1P!
0S!
1N
0S
1T
0U
1b!
1E"
0D"
0x
0y
0@!
1n
0o
0e!
0s
0u
0d"
0b"
0^"
1c"
0Q"
0S"
0>"
16"
0E
0G
1e!
0b!
1S!
0P!
1@!
0+!
0E!
0~
0{
#150
b1111 h"
0+
0?
#160
b10000 h"
1+
1?
b1000 V"
b1000 B"
1F"
0E"
0c"
1e"
1Y"
1Y"
#170
b10001 h"
0+
0?
#180
b10010 h"
1+
1?
b1 V"
b1 B"
0F"
1C"
1`"
1`"
1_"
1_"
1]"
0e"
0Y"
0Y"
1N"
1J
b11111101 q
0.!
1+!
1."
1~
b1 ?"
b1 _
01!
04!
07!
0:!
0=!
0@!
b1 q
#190
b10011 h"
0+
0?
#200
b10100 h"
1+
1?
1-!
00!
03!
06!
09!
0<!
0?!
0B!
b10 V"
0!!
0"!
0#!
0$!
0%!
0&!
0'!
1(!
b10 B"
b1 *!
0W
0X
0Y
0Z
0[
0\
0]
1^
1D"
0C"
0h
0i
0j
0k
0l
0m
0n
1o
0`"
0`"
0_"
0_"
0]"
1d"
1b"
0t
1Q"
1S"
0N"
07"
08"
09"
0:"
0;"
0<"
1>"
14"
06"
1E
1G
0J
1)!
b0 q
0+!
0."
1b!
0S!
1P!
1E!
1{
1x
1u
#210
b10101 h"
0+
0?
#220
b10110 h"
1+
1?
0|
0-!
1R!
0U!
1d!
b10 @"
b100 V"
1G!
0L!
1M!
1N!
0)!
0(!
0v
b100 B"
b10 w
b11000001 O!
b0 *!
0^
0P!
1O
0T
1U
1_!
1E"
0D"
0x
1y
1@!
0o
0e!
1s
0u
0d"
0b"
1c"
0Q"
0S"
0>"
16"
0E
0G
0N!
0="
15"
1e!
0_!
1P!
0@!
0E!
0~
0{
04"
0s
0y
#230
b10111 h"
0+
0?
#240
b11000 h"
1+
1?
b1000 V"
b1000 B"
1F"
0E"
0c"
1e"
1Y"
1Y"
#250
b11001 h"
0+
0?
#260
b11010 h"
1+
1?
b1 V"
b1 B"
0F"
1C"
1`"
1`"
1_"
1_"
1a"
1]"
0e"
0Y"
0Y"
1N"
1P"
1H
1J
b11111100 ,"
b1 q
1+!
1."
1~
1>"
06"
1`
1a
1b
1c
1d
1e
0f
0g
0>"
1/"
10"
11"
12"
13"
14"
16"
05"
b11111101 ?"
b11111101 _
11!
14!
17!
1:!
1=!
1@!
b11111101 q
#270
b11011 h"
0+
0?
#280
b11100 h"
1+
1?
1-!
13!
16!
19!
1<!
1?!
1B!
b10 V"
1!!
1"!
1#!
1$!
1%!
1&!
1(!
b10 B"
b11111101 *!
1W
1X
1Y
1Z
1[
1\
1^
1D"
0C"
1h
1i
1j
1k
1l
1m
1o
0`"
0`"
0_"
0_"
0a"
0]"
1d"
1b"
1^"
1t
1Q"
1S"
0N"
0P"
17"
18"
19"
1:"
1;"
1<"
1>"
04"
06"
1E
1G
0H
0J
1)!
1N!
b11 ,"
15"
b0 q
1.!
0+!
0."
1_!
0P!
1E!
1{
0>"
16"
0`
0a
0b
0c
0d
0e
1f
1g
1y
1x
1u
1s
0<"
1>"
0/"
00"
01"
02"
14"
06"
0;"
1="
05"
0:"
1<"
12"
04"
09"
1;"
11"
03"
08"
1:"
10"
02"
07"
19"
1/"
01"
18"
00"
17"
0/"
#290
b11101 h"
0+
0?
#300
b11110 h"
1+
1?
1|
0-!
10!
0R!
1a!
b11 @"
b100 V"
1H!
0M!
0N!
1'!
0(!
0)!
1v
b100 B"
b11 w
b11100000 O!
b11111110 *!
1]
0^
1+!
1P
0U
1\!
1E"
0D"
0x
0y
0@!
1n
0o
0e!
0s
0u
0d"
0b"
0^"
1c"
0Q"
0S"
0>"
16"
0E
0G
1e!
0\!
1@!
0+!
0E!
0~
0{
#310
b11111 h"
0+
0?
#320
b100000 h"
1+
1?
b1000 V"
b1000 B"
1F"
0E"
0c"
1e"
1Y"
1Y"
#330
b100001 h"
0+
0?
#340
b100010 h"
1+
1?
b1 V"
b1 B"
0F"
1C"
1`"
1`"
1_"
1_"
1]"
0e"
0Y"
0Y"
1N"
1J
b11111101 q
0.!
1+!
1."
1~
b1 ?"
b1 _
01!
04!
07!
0:!
0=!
0@!
b1 q
#350
b100011 h"
0+
0?
#360
b100100 h"
1+
1?
1-!
00!
03!
06!
09!
0<!
0?!
0B!
b10 V"
0!!
0"!
0#!
0$!
0%!
0&!
0'!
1(!
b10 B"
b1 *!
0W
0X
0Y
0Z
0[
0\
0]
1^
1D"
0C"
0h
0i
0j
0k
0l
0m
0n
1o
0`"
0`"
0_"
0_"
0]"
1d"
1b"
0t
1Q"
1S"
0N"
07"
08"
09"
0:"
0;"
0<"
1>"
14"
06"
1E
1G
0J
1)!
b0 q
0+!
0."
1\!
1E!
1{
1x
1u
#370
b100101 h"
0+
0?
#380
b100110 h"
1+
1?
0|
0-!
1^!
b100 @"
b100 V"
1I!
0)!
0(!
0v
b100 B"
b100 w
b11110000 O!
b0 *!
0^
1Q
1Y!
1E"
0D"
0x
0o
0e!
0u
0d"
0b"
1c"
0Q"
0S"
0>"
16"
0E
0G
0="
15"
1e!
0Y!
0E!
0~
0{
04"
#390
b100111 h"
0+
0?
#400
b101000 h"
1+
1?
b1000 V"
b1000 B"
1F"
0E"
0c"
1e"
1Y"
1Y"
#410
b101001 h"
0+
0?
#420
b101010 h"
1+
1?
b1 V"
b1 B"
0F"
1C"
1`"
1`"
1_"
1_"
0e"
0Y"
0Y"
#430
b101011 h"
0+
0?
#440
b101100 h"
1+
1?
b10 V"
b10 B"
1D"
0C"
0`"
0`"
0_"
0_"
1d"
1b"
1Q"
1S"
1E
1G
0e!
1Y!
1E!
1~
1{
#450
b101101 h"
0+
0?
#460
b101110 h"
1+
1?
1[!
0g!
b101 @"
b100 V"
0F!
1J!
b100 B"
b101 w
b1111000 O!
1V!
0N
1R
0b!
1E"
0D"
0d"
0b"
1c"
0Q"
0S"
0E
0G
1b!
0V!
0E!
0~
0{
#470
b101111 h"
0+
0?
#480
b110000 h"
1+
1?
b1000 V"
b1000 B"
1F"
0E"
0c"
1e"
1Y"
1Y"
#490
b110001 h"
0+
0?
#500
b110010 h"
1+
1?
b1 V"
b1 B"
0F"
1C"
1`"
1`"
1_"
1_"
0e"
0Y"
0Y"
#510
b110011 h"
0+
0?
#520
b110100 h"
1+
1?
b10 V"
b10 B"
1D"
0C"
0`"
0`"
0_"
0_"
1d"
1b"
1Q"
1S"
1E
1G
0b!
1V!
1E!
1~
1{
#530
b110101 h"
0+
0?
#540
b110110 h"
1+
1?
1X!
0d!
b110 @"
b100 V"
0G!
1K!
b100 B"
b110 w
b111100 O!
1S!
0O
1S
0_!
1E"
0D"
0d"
0b"
1c"
0Q"
0S"
0E
0G
1_!
0S!
0E!
0~
0{
#550
b110111 h"
0+
0?
#560
b111000 h"
1+
1?
b1000 V"
b1000 B"
1F"
0E"
0c"
1e"
1Y"
1Y"
#570
b111001 h"
0+
0?
#580
b111010 h"
1+
1?
b1 V"
b1 B"
0F"
1C"
1`"
1`"
1_"
1_"
0e"
0Y"
0Y"
#590
b111011 h"
0+
0?
#600
b111100 h"
1+
1?
b10 V"
b10 B"
1D"
0C"
0`"
0`"
0_"
0_"
1d"
1b"
1Q"
1S"
1E
1G
0_!
1S!
1E!
1~
1{
#610
b111101 h"
0+
0?
#620
b111110 h"
1+
1?
1U!
0a!
b111 @"
b100 V"
0H!
1L!
b100 B"
b111 w
b11110 O!
1A"
1P!
0P
1T
0\!
1E"
0D"
1c"
0d"
0b"
0Q"
0S"
0E
0G
1\!
0P!
0E!
0~
0{
#630
b111111 h"
0+
0?
#640
b1000000 h"
1+
1?
b1000 V"
b1000 B"
1F"
0E"
0c"
1Z"
1Y"
1Y"
1J"
#650
b1000001 h"
0+
0?
#660
b1000010 h"
1+
1?
b1 V"
0["
1\"
1I"
0H"
b1 B"
0F"
1C"
0Z"
0Y"
0Y"
0J"
1f"
1f"
1b"
1Q"
1T"
1D
1G
0\!
1P!
1E!
1~
1{
b0 z
b0 $
#670
b1000011 h"
0+
0?
#680
b1000100 h"
1+
1?
1R!
0^!
b10 V"
0I!
1M!
1N!
b10 B"
b1111 O!
0Q
1U
0Y!
1D"
0C"
1y
1@!
1s
0f"
0f"
0b"
1g"
1g"
1U"
0Q"
0T"
1C
0D
0G
0N!
1%
1Y!
0@!
0E!
0~
0{
0s
0y
b1111 z
b1111 $
#690
b1000101 h"
0+
0?
#700
b1000110 h"
1+
1?
b100 V"
0\"
0I"
b100 B"
1E"
0D"
0g"
0g"
0U"
0C
0%
#710
b1000111 h"
0+
0?
#720
b1001000 h"
1+
1?
b1000 V"
b1000 B"
1F"
0E"
#730
b1001001 h"
0+
0?
#740
b1001010 h"
1+
1?
b1 V"
b1 B"
0F"
1C"
#750
b1001011 h"
0+
0?
#760
b1001100 h"
1+
1?
b10 V"
b10 B"
1D"
0C"
#770
b1001101 h"
0+
0?
#780
b1001110 h"
1+
1?
b100 V"
b100 B"
1E"
0D"
#790
b1001111 h"
0+
0?
#800
b1010000 h"
1+
1?
b1000 V"
b1000 B"
1F"
0E"
#810
b1010001 h"
0+
0?
#820
b1010010 h"
1+
1?
b1 V"
b1 B"
0F"
1C"
#830
b1010011 h"
0+
0?
#840
b1010100 h"
1+
1?
b10 V"
b10 B"
1D"
0C"
#850
b1010101 h"
0+
0?
#860
b1010110 h"
1+
1?
b100 V"
b100 B"
1E"
0D"
#870
b1010111 h"
0+
0?
#880
b1011000 h"
1+
1?
b1000 V"
b1000 B"
1F"
0E"
#890
b1011001 h"
0+
0?
#900
b1011010 h"
1+
1?
b1 V"
b1 B"
0F"
1C"
#910
b1011011 h"
0+
0?
#920
b1011100 h"
1+
1?
b10 V"
b10 B"
1D"
0C"
#930
b1011101 h"
0+
0?
#940
b1011110 h"
1+
1?
b100 V"
b100 B"
1E"
0D"
#950
b1011111 h"
0+
0?
#960
b1100000 h"
1+
1?
b1000 V"
b1000 B"
1F"
0E"
#970
b1100001 h"
0+
0?
#980
b1100010 h"
1+
1?
b1 V"
b1 B"
0F"
1C"
#990
b1100011 h"
0+
0?
#1000
b1100100 h"
